{"version":3,"sources":["components/Webapi/index.js","components/ChartsCoronavirus/index.js","components/TabelaCoronavirus/index.js","App.js","reportWebVitals.js","index.js"],"names":["a","fetch","then","res","json","result","isLoaded","rawData","error","Webapi","ChatsCoronavirus","props","useState","dados","width","height","chartType","loader","data","options","title","chartArea","hAxis","minValue","vAxis","country_region","rootProps","TabelaCoronavirus","className","scope","map","value","index","App","SetIsLoaded","SetDados","useEffect","loadhandler","country","states","values","filter","c","Country_Region","includes","Province_State","Number","parseFloat","Confirmed","Deaths","listas","push","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAAA,sBAAAA,EAAA,sEACmBC,MAAM,uCAClBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACG,MAAO,CAAEC,UAAU,EAAMC,QAASF,EAAOE,YAM7C,SAACC,GACC,MAAO,CAAEF,UAAU,EAAMC,QAASC,MAZ5C,oF,sBAkBeC,M,yDCgBAC,MA/Bf,SAA0BC,GAEtB,MAAgBC,mBAASD,EAAME,OAAxBA,EAAP,oBAGA,OACI,8BACI,cAAC,IAAD,CACIC,MAAO,SACPC,OAAQ,QACRC,UAAU,WACVC,OAAQ,gDACRC,KAAML,EACNM,QAAS,CACLC,MAAM,4BACNC,UAAW,CAAEP,MAAO,OACpBQ,MAAO,CACHF,MAAO,mBACPG,SAAU,GAEdC,MAAO,CACHJ,MAAOT,EAAMc,iBAIrBC,UAAW,CAAE,cAAe,UCK7BC,MA/Bf,SAA2BhB,GACvB,OACI,qBAAKiB,UAAU,MAAf,SACI,wBAAOA,UAAU,iBAAjB,UACI,uBAAOA,UAAU,aAAjB,SACI,+BACI,oBAAIC,MAAM,MAAMD,UAAU,MAA1B,oBACA,oBAAIC,MAAM,MAAMD,UAAU,OAA1B,wBACA,oBAAIC,MAAM,MAAMD,UAAU,OAA1B,yBAGR,gCACKjB,EAAME,MAAMiB,KAAI,SAACC,EAAOC,GACrB,OAAIA,EAAQ,EAEJ,+BACI,6BAAKD,EAAM,KACX,6BAAKA,EAAM,KACX,6BAAKA,EAAM,OAHNC,EAAQD,EAAM,IAOxB,gBCgBhBE,MAnCf,WAEE,MAAgCrB,oBAAS,GAAzC,mBAAON,EAAP,KAAiB4B,EAAjB,KACA,EAA0BtB,mBAAS,IAAnC,mBAAOC,EAAP,KAAcsB,EAAd,KAEAC,qBAAU,WACR3B,IAASP,MAAK,SAAA6B,GACZI,EAASJ,EAAMxB,SACf2B,EAAYH,EAAMzB,eAGnB,CAACA,IAEJ,IAAM+B,EAAc,SAACC,EAASC,GAC1B,IACMC,EADW3B,EAAM4B,QAAO,SAAAC,GAAC,OAAIA,EAAEC,iBAAmBL,GAAWC,EAAOK,SAASF,EAAEG,mBAC7Df,KAAI,SAAAU,GAAM,MAAK,CAACA,EAAOK,eAAgBC,OAAOC,WAAWP,EAAOQ,WAAYF,OAAOC,WAAWP,EAAOS,YAEzHC,EAAS,GAGb,OAFAA,EAAOC,KAFO,CAAC,SAAU,aAAc,WAGvCD,EAAOC,KAAP,MAAAD,EAAM,YAASV,IACRU,GAGX,OAAK5C,EAID,gCACG,cAAC,EAAD,CAAkBO,MAAOwB,EAAY,SAAU,CAAC,SAAU,YAAa,iBAAkB,mBAAoB,aAAcZ,eAAe,WAC1I,cAAC,EAAD,CAAmBZ,MAAOwB,EAAY,SAAU,CAAC,SAAU,YAAa,iBAAkB,mBAAoB,kBAL5G,8CCjBIe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpD,MAAK,YAAkD,IAA/CqD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.255b0b50.chunk.js","sourcesContent":["async function Webapi(){\n      return await fetch(\"https://coronavirus.m.pipedream.net\")\n      .then(res => res.json())\n      .then(\n        (result) => {      \n            return { isLoaded: true, rawData: result.rawData }\n            //return result.rawData\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          return { isLoaded: true, rawData: error }\n          //return error          \n        }\n      )\n}\n\nexport default Webapi","import React, { useState } from 'react';\nimport { Chart } from \"react-google-charts\";\n\nfunction ChatsCoronavirus(props) {\n\n    const [dados] = useState(props.dados);\n\n\n    return (\n        <div>\n            <Chart\n                width={'1500px'}\n                height={'600px'}\n                chartType=\"BarChart\"\n                loader={<div>Loading Chart</div>}\n                data={dados}\n                options={{\n                    title: `Dados sobre o coronavirus`,\n                    chartArea: { width: '50%' },\n                    hAxis: {\n                        title: 'Total Population',\n                        minValue: 0,\n                    },\n                    vAxis: {\n                        title: props.country_region,\n                    },\n                }}\n                // For tests\n                rootProps={{ 'data-testid': '1' }}\n            />\n        </div>\n    ) \n}\n\nexport default ChatsCoronavirus","import React from 'react';\n\nfunction TabelaCoronavirus(props) {\n    return (\n        <div className=\"p-4\">\n            <table className=\"table table-sm\">\n                <thead className=\"thead-dark\">\n                    <tr>\n                        <th scope=\"col\" className=\"w-5\">Estado</th>\n                        <th scope=\"col\" className=\"w-25\">Intectados</th>\n                        <th scope=\"col\" className=\"w-25\">Mortos</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {props.dados.map((value, index) => {\n                        if (index > 0) {\n                            return (\n                                <tr key={index + value[0]}>\n                                    <td>{value[0]}</td>\n                                    <td>{value[1]}</td>\n                                    <td>{value[2]}</td>\n                                </tr>\n                            )\n                        }\n                        return null;\n                    })}\n                </tbody>\n            </table>\n        </div>\n    )\n\n}\n\nexport default TabelaCoronavirus;","import React, { useEffect, useState } from 'react';\nimport Webapi from './components/Webapi'\nimport ChatsCoronavirus from './components/ChartsCoronavirus';\nimport TabelaCoronavirus from './components/TabelaCoronavirus';\n\nfunction App() {\n\n  const [isLoaded, SetIsLoaded] = useState(false);\n  const [dados, SetDados] = useState([]);\n\n  useEffect(() => {\n    Webapi().then(value => {      \n      SetDados(value.rawData);\n      SetIsLoaded(value.isLoaded);\n\n    });\n  }, [isLoaded])\n\n  const loadhandler = (country, states) => {\n      const countrys = dados.filter(c => c.Country_Region === country && states.includes(c.Province_State));\n      const values = countrys.map(values => ([values.Province_State, Number.parseFloat(values.Confirmed), Number.parseFloat(values.Deaths)]));\n      let titulos = [\"Coutry\", \"Infectados\", \"Mortos\"];\n      let listas = [];\n      listas.push(titulos);\n      listas.push(...values);\n      return listas;\n  }\n\n  if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n    return (\n      <div>\n         <ChatsCoronavirus dados={loadhandler(\"Brazil\", [\"Parana\", \"Sao Paulo\", \"Santa Catarina\", \"Distrito Federal\", \"Amazonas\"])} country_region=\"Brazil\"/>\n         <TabelaCoronavirus dados={loadhandler(\"Brazil\", [\"Parana\", \"Sao Paulo\", \"Santa Catarina\", \"Distrito Federal\", \"Amazonas\"])} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}